package golearning_test

import (
	"encoding/json"
	"testing"
)

type User struct {
	Name    string
	Age     int
	Address Address  `json:"home_address"`
	Hobby   []string `json:"hobbies"`
}

type Address struct {
	City     string
	Country  string `json:",omitempty"`
	Province string `json:"Continent"`
}

func TestJsonBasic(t *testing.T) {
	// marshal
	user1 := User{Name: "Jimmy", Age: 42, Address: Address{Country: "CN", Province: "Beijing", City: "Beijing"}}
	data, err := json.Marshal(user1)
	if err != nil {
		t.Errorf("marshal error: %v", err)
	}
	t.Logf("data: %s", data)
	// marshal index
	data, _ = json.MarshalIndent(user1, "", "  ")
	t.Logf("data: \n%s", data)

	// unmarshal
	var user2 = &User{}
	json.Unmarshal(data, user2)
	t.Logf("user: \n%#v", *user2)
}

func TestJSONBlogProblem(t *testing.T) {
	type AutoGenerated struct {
		Age   int    `json:"age"`
		Nage  string `json:"name"`
		Child []int  `json:"child"`
	}

	jsonStr1 := `{"age": 14,"name": "potter", "child":[1,2,3]}`
	a := AutoGenerated{}
	json.Unmarshal([]byte(jsonStr1), &a)
	aa := a.Child
	t.Log("blog:", aa)
	t.Logf("point: %p, %p", aa, a.Child)
	t.Logf("caption: %d", cap(a.Child))
	t.Log("origin:", a.Child)
	jsonStr2 := `{"age": 12,"name": "potter", "child":[3,4,5,7,8,9]}`
	json.Unmarshal([]byte(jsonStr2), &a)
	t.Log("blog:", aa)
	t.Log("origin:", a.Child)
	t.Logf("point: %p, %p", aa, a.Child)
	t.Logf("caption: %d", cap(a.Child))
}

func TestSlice2(t *testing.T) {
	s := []int{}
	t.Logf("cap: %d", cap(s))
	t.Logf("point: %p", s)
	ss := append(s, 1, 2, 3)
	t.Logf("cap: %d", cap(ss))
	t.Logf("point: %p", ss)
}

func TestStringtoMap(t *testing.T) {
	str:=`{"remark": "name", "groupName": "department_id", "sourceDeptId": "open_department_id", "sourceDeptParentId": "open_department_id"}`
	m:= make(map[string]string)
	json.Unmarshal([]byte(str), &m)
	t.Logf("%#v", m)
}
